name: 'Docker Build'
on:
  workflow_dispatch:
    inputs:
      vim_version:
        description: 'Target version of Vim'
        required: true
      update_cache:
        description: 'Do not use cache layer and update it'
        required: false
        default: false
        type: 'boolean'

jobs:
  build-and-push:
    name: 'Build ${{ matrix.image_type }} on ${{ matrix.base }}'
    strategy:
      matrix:
        image_type: ['basic', 'full']
        base: ['alpine', 'ubuntu']
      fail-fast: false
    runs-on: 'ubuntu-latest'
    env:
      CACHE_IMAGE_NAME: 'ghcr.io/${{ github.repository_owner }}/vim'
      HUB_IMAGE_NAME: 'thinca/vim'
      GHCR_IMAGE_NAME: 'ghcr.io/${{ github.repository_owner }}/vim'
    steps:
      - name: 'Prepare variables'
        run: |
          INPUT_REF='${{ github.event.inputs.vim_version }}'
          : ${INPUT_REF:=${GITHUB_REF}}
          ORIGINAL_TAG=${INPUT_REF##*/}
          VIM_VERSION=${ORIGINAL_TAG%+*}

          echo "VIM_VERSION=${VIM_VERSION}" >> ${GITHUB_ENV}
          echo "CACHE_IMAGE_ICONV=${CACHE_IMAGE_NAME}:stage-cache-iconv-${{ matrix.base }}" >> ${GITHUB_ENV}
          echo "CACHE_IMAGE_PREPARE=${CACHE_IMAGE_NAME}:stage-cache-prepare-${{ matrix.image_type }}-${{ matrix.base }}" >> ${GITHUB_ENV}

      - uses: 'actions/checkout@v2'
      - name: 'Build'
        env:
          DOCKER_BUILDKIT: '1'
        run: |
          # Login to hub.docker.com
          docker login --username '${{ secrets.DOCKER_HUB_USER }}' --password-stdin <<<"${{ secrets.DOCKER_HUB_TOKEN }}"
          # Login to ghcr.io
          docker login ghcr.io --username '${{ github.repository_owner }}' --password-stdin <<<"${{ secrets.GITHUB_TOKEN }}"

          build() {
            local target=$1
            local cache_from=
            if [[ "${{ github.event.inputs.update_cache }}" != "true" && -n "$2" ]]; then
              cache_from="--cache-from=$2"
            fi

            # Temporarily disables the cache on basic-ubuntu because empty docker layer is created with unknown reason.
            if [[ "${{ matrix.image_type }}-${{ matrix.base }}" == "basic-ubuntu" ]]; then
              cache_from=
            fi

            echo "-- build ${target} --"
            docker build \
              --tag "vim:${target}" \
              --target "${target}" \
              ${cache_from} \
              --build-arg BUILDKIT_INLINE_CACHE=1 \
              --build-arg "VIM_VERSION=${VIM_VERSION}" \
              --build-arg "VIM_ENABLE_ALL=${{ matrix.image_type == 'full' && 'yes' || '' }}" \
              --build-arg "VIM_COMPILEDBY=Docker <https://github.com/thinca/dockerfile-vim>" \
              --progress plain \
              ./${{ matrix.base }}
          }

          if [[ "${{ matrix.base }}" == "alpine" ]]; then
            build iconv "${CACHE_IMAGE_ICONV}"
          fi
          build prepare "${CACHE_IMAGE_PREPARE}"
          build release

      - name: 'Push'
        run: |
          # Push cache images
          if [[ "${{ matrix.base }}" == "alpine" ]]; then
            docker tag vim:iconv "${CACHE_IMAGE_ICONV}"
            docker push "${CACHE_IMAGE_ICONV}"
          fi

          docker tag vim:prepare "${CACHE_IMAGE_PREPARE}"
          docker push "${CACHE_IMAGE_PREPARE}"

          push-image-tag-to-multi() {
            local tag=$1

            # Push to Docker Hub
            local hub_image="${HUB_IMAGE_NAME}:${tag}"
            docker tag vim:release "${hub_image}"
            docker push "${hub_image}"

            # Push to GitHub Container Registry
            local ghcr_image="${GHCR_IMAGE_NAME}:${tag}"
            docker tag vim:release "${ghcr_image}"
            docker push "${ghcr_image}"
          }

          push-release-image() {
            local version=$1

            push-image-tag-to-multi "${version}-${{ matrix.image_type }}-${{ matrix.base }}"

            if [[ "${{ matrix.base }}" == "alpine" ]]; then
              push-image-tag-to-multi "${version}-${{ matrix.image_type }}"

              if [[ "${{ matrix.image_type }}" == "basic" ]]; then
                push-image-tag-to-multi "${version}"
              fi
            fi

            if [[ "${{ matrix.image_type }}" == "basic" ]]; then
              push-image-tag-to-multi "${version}-${{ matrix.base }}"
            fi
          }

          push-release-image "${VIM_VERSION}"

          # Push latest tag when the target version is head.
          remotes=$(git ls-remote --tags --heads https://github.com/vim/vim)

          target_sha=$(echo "${remotes}" | grep "refs/tags/${VIM_VERSION}$" | cut -f1)
          echo "target_sha: ${target_sha}"
          master_sha=$(echo "${remotes}" | grep "refs/heads/master$" | cut -f1)
          echo "master_sha: ${master_sha}"
          if [[ -n "${target_sha}" && "${target_sha}" == "${master_sha}" ]]; then
            push-release-image "latest"
          fi
